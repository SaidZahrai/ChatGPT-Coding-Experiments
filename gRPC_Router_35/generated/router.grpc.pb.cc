// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: router.proto

#include "router.pb.h"
#include "router.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* RegistrationService_method_names[] = {
  "/RegistrationService/RegisterClient",
};

std::unique_ptr< RegistrationService::Stub> RegistrationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RegistrationService::Stub> stub(new RegistrationService::Stub(channel, options));
  return stub;
}

RegistrationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterClient_(RegistrationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RegistrationService::Stub::RegisterClient(::grpc::ClientContext* context, const ::ClientInfo& request, ::ClientRegistrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ClientInfo, ::ClientRegistrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterClient_, context, request, response);
}

void RegistrationService::Stub::async::RegisterClient(::grpc::ClientContext* context, const ::ClientInfo* request, ::ClientRegistrationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ClientInfo, ::ClientRegistrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterClient_, context, request, response, std::move(f));
}

void RegistrationService::Stub::async::RegisterClient(::grpc::ClientContext* context, const ::ClientInfo* request, ::ClientRegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ClientRegistrationResponse>* RegistrationService::Stub::PrepareAsyncRegisterClientRaw(::grpc::ClientContext* context, const ::ClientInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ClientRegistrationResponse, ::ClientInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterClient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ClientRegistrationResponse>* RegistrationService::Stub::AsyncRegisterClientRaw(::grpc::ClientContext* context, const ::ClientInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterClientRaw(context, request, cq);
  result->StartCall();
  return result;
}

RegistrationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RegistrationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RegistrationService::Service, ::ClientInfo, ::ClientRegistrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RegistrationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ClientInfo* req,
             ::ClientRegistrationResponse* resp) {
               return service->RegisterClient(ctx, req, resp);
             }, this)));
}

RegistrationService::Service::~Service() {
}

::grpc::Status RegistrationService::Service::RegisterClient(::grpc::ServerContext* context, const ::ClientInfo* request, ::ClientRegistrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DirectoryService_method_names[] = {
  "/DirectoryService/GetDirectory",
};

std::unique_ptr< DirectoryService::Stub> DirectoryService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DirectoryService::Stub> stub(new DirectoryService::Stub(channel, options));
  return stub;
}

DirectoryService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetDirectory_(DirectoryService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DirectoryService::Stub::GetDirectory(::grpc::ClientContext* context, const ::ClientInfo& request, ::ClientDirectory* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ClientInfo, ::ClientDirectory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDirectory_, context, request, response);
}

void DirectoryService::Stub::async::GetDirectory(::grpc::ClientContext* context, const ::ClientInfo* request, ::ClientDirectory* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ClientInfo, ::ClientDirectory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDirectory_, context, request, response, std::move(f));
}

void DirectoryService::Stub::async::GetDirectory(::grpc::ClientContext* context, const ::ClientInfo* request, ::ClientDirectory* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDirectory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ClientDirectory>* DirectoryService::Stub::PrepareAsyncGetDirectoryRaw(::grpc::ClientContext* context, const ::ClientInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ClientDirectory, ::ClientInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDirectory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ClientDirectory>* DirectoryService::Stub::AsyncGetDirectoryRaw(::grpc::ClientContext* context, const ::ClientInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDirectoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

DirectoryService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DirectoryService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DirectoryService::Service, ::ClientInfo, ::ClientDirectory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DirectoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ClientInfo* req,
             ::ClientDirectory* resp) {
               return service->GetDirectory(ctx, req, resp);
             }, this)));
}

DirectoryService::Service::~Service() {
}

::grpc::Status DirectoryService::Service::GetDirectory(::grpc::ServerContext* context, const ::ClientInfo* request, ::ClientDirectory* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* RoutingService_method_names[] = {
  "/RoutingService/SendMessage",
};

std::unique_ptr< RoutingService::Stub> RoutingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RoutingService::Stub> stub(new RoutingService::Stub(channel, options));
  return stub;
}

RoutingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendMessage_(RoutingService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RoutingService::Stub::SendMessage(::grpc::ClientContext* context, const ::MessageRequest& request, ::MessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MessageRequest, ::MessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessage_, context, request, response);
}

void RoutingService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::MessageRequest* request, ::MessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MessageRequest, ::MessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, std::move(f));
}

void RoutingService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::MessageRequest* request, ::MessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MessageResponse>* RoutingService::Stub::PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::MessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MessageResponse, ::MessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MessageResponse>* RoutingService::Stub::AsyncSendMessageRaw(::grpc::ClientContext* context, const ::MessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

RoutingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoutingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoutingService::Service, ::MessageRequest, ::MessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RoutingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MessageRequest* req,
             ::MessageResponse* resp) {
               return service->SendMessage(ctx, req, resp);
             }, this)));
}

RoutingService::Service::~Service() {
}

::grpc::Status RoutingService::Service::SendMessage(::grpc::ServerContext* context, const ::MessageRequest* request, ::MessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}



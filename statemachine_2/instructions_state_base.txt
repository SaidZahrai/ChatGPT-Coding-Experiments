file:include/state_base.h
Consider class 'StateBase' with:
    1. Forward declaration to class 'MachineBase'.
    2. Private
        int function: 'add transition' (string: 'name', int function(): 'fcn' ) 
    3. Protected 
        a. Property string: 'name'.
        b. Property pointer 'MachineBase': 'machine ptr'
        b. Property map list of (string, int function()): 'transitions'.
    4. Public
        a. getters for non const 'name', 'machine ptr' and 'transitions'
        b. constructor (string: 'name', pointer of 'MachineBase').
        c. pure virtual int function: 'action'().
and write the class declaration header file 'state_base.h' for 'StateBase' with
    1. C++17
    2. Google coding style
    3. Detailed comments in the code

file:src/state_base.cpp
Consider the class 'StateBase' as defined above with:
    1. constructor: sets protected variables 'name' and 'machine ptr'
    2. 'add transition':
        a. returning -1 if 'transitions' has an element with the string 'name'
        b. adding a new element in 'transition' and returning 0, if such element does not exist.
    3. all getters 
 and write the implementation file 'state_base.cpp' for 'StateBase' with
    1. all necessary header files
    2. C++17
    3. Google coding style
    4. Detailed comments in the code

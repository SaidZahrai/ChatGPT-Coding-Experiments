Use "temperature" value of 0 in this conversation.
Use "Density_penalty" value of 0 in this conversation.
Use "Top_p" value of 0 in this conversation.
Use underscore binding for variable names and ending underscore for private or protected member variables.
Use underscore binding for function names and ending underscore for private or protected member functions.
Use underscore binding for file names.
Use capital letter for each words in type names.

C++17 header file 'state_base.h' for a class called 'StateBase' with:
    1. protected property 'name' with getter function 'get name'
    2. A forward declaration to class 'MachineBase' and a proteted property of type 'MachineBase' pointer called 'machine ptr' with getter function 'get machine'
    3. constructor with two arguments a string 'name' and a pointer to a 'MachineBase' object.
    4. pure virtual function called 'action' without arguments returning an integer error code
    5. protected map list called 'transitions' storing pairs of an ananomous functions and its name as a string,  and its getter 'get transitions'. Ananomous functions have no argument and return an integer error code.
    4. A private function 'add transition' taking a string and an ananomous function, returning an integer error code.
    5. include all necessary header files.
Detailed comments in the code.
    
C++17 implementation file 'state_base.cpp' according to Google coding guidelines for the class 'StateBase' with:
    1. Constructor sets the protected properties 'name' and 'machine ptr' using its arguments.
    2. private function 'add transition' adds the pair of name and function to the 'transitions'
    3. all getters and setters.
    4. include all necessary header files.
Detailed comments in the code.

C++17 header file 'machine_base.h' according to Google coding guidelines for a class called 'MachineBase' with:
    1. A constructor with a string argument 'name'.
    2. protected property 'name' with getter function 'get name'
    2. private map called 'states' pairing a string 'name' wth a pointer of type 'StateBase', and its getter 'get states'. 
    3. A protected pointer of type 'StateBase' called 'current state' and its getter 'get current state'.
    4. A public method called 'set current state' that gets a string as argument and returns an integer error code.
    5. A public function called 'execute' without argument returning an integer error code.
    6. A protected function, 'add state', with an argument being a pointer to a 'StateBase'. 
    7. include all necessary header files.
Detailed comments in the code.

C++17 implementation file 'machine_base.cpp' according to Google coding guidelines for the class 'MachineBase' with:
    1. constructor stores the argument 'name' in the proteted variable called 'name'.
    2. 'set current state' searches for the corresponding state to its string argument in 'states' and sets the 'current state' to the found state if it exists. It returns 0 if successful and -1 otherwise.
    3. 'execute' calls 'action' function of the 'current state' and returns whatever that returns. 
    4. 'add state' extracts the name of the state from the object and adds it to 'states' with its name as the key, if such a state does not exist and return 0. If a state with the same name exists, it only returns -1.
    5. all setters and getters.
    6. include all necessary header files.
Detailed comments in the code.


C++ 17 header file 'states.h' according to Google coding guidelines with comments for 3 classes StateA, StateB and StateC derived from 'StateBase' class, with 
    1. constructor with one argument, a pointer to an object of type 'MachineBase'. 
    2. include all necessary header files.
Detailed comments in the code.

C++ 17 implementation file 'states_cpp' according to Google coding guidelines with comments for three classes 'StateA', 'StateB' and 'StateC':
    1. Constructor of StateA, StateB and StateC calling the constructor of StateBase with the names being 'A', 'B' and 'C', respectively and the pointer in the argument list.
    2. 'action' function of each of these classes printing the name of the state to the console with 'std::cout' and then calling the 'set current state' of the 'machine' from its base such that StateA sets the current state of the machine to 'B', StateB should set it to 'C' and StateC should set it to 'A'.
    3. include all necessary header files.
Detailed comments in the code.


C++ 17 header file 'machine_one.h' according to Google coding style
Consider the MachineBase' already defined and derive the template class 'MachineOne'  with a pack list of 'States' as typenames and a constructor that has no arguments. 
    1. Assume that the classes in the pack list take only one argument, being a pointer to the object itself.
    2. constructor of 'MachineOne' setting calling super class constructor with the name 'MachineOne' and then looping over all classes in the template pack list and for each class creating a new object, with pointer to itself in their conscructor and adding them to 'states' of the base class, by calling 'add state' from the base class.
    3. include all necessary header files.
Detailed comments in the code.

C++ 17 implementation file 'machine_one.cpp' according to Google coding style with comments for the template class 'MachineOne' as defined with
    1. Assume that the classes in the pack list take only one argument, being a pointer to the object itself.
    2. constructor of 'MachineOne' setting calling super class constructor with the name 'MachineOne' and then looping over all classes in the template pack list and for each class creating a new object, with pointer to itself in their conscructor and adding them to 'states' of the base class, by calling 'add state' from the base class.
    3. include all necessary header files.
Detailed comments in the code.

A C++17 test program 'test.cpp' according to Google coding guidelines that
1. Instantiates the derived class 'State machine' with the three classes StateA, StateB and StateC, in a variable sm. 
2. Calls sm's 'set current state' with argument 'A'.
3. calls sm's 'execute' 7 times.
Detailed comments in the code.

A CMakeLists.txt assuming
    1. implementation files are in './src'
    2. header files are in './include'
    3. the test program is in './application'
    4. C++17
Detailed comments in the code.